# -*- coding: utf-8 -*-
"""ch01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TeHjViZFEAFl8nQ1XILJsymiTRy2SKIm
"""

#@title 기본 제목 텍스트
# 숫자형
# 변수 (식별자 중 하나 - 클래스명, 변수명, 모듈명, 함수명)
a=123 # a라는 변수를 선언하고 123이라는 숫자 값을 대입(저장)
print(a) # 함수 - 함수명(매개변수){실행문} -> 호출 시 함수명(인자)
print(type(a)) #

a=123

#@함수선언
def myPrint(ar):
    print(ar)

def myType(a):
  return type(a)

myPrint(a)
print(myType(a))

a=4.24E10
a

# 10진수 8진수 2진수
a=0o177 # 8진수
a

#16진수
a=0x8ff #8*16^2 + 8^1*15 + 8^0*7
a

#사칙연산 : + - * % //(몫) **(승)
a=3
b=4
print(a+b)
print(a-b)
print(a/b)
print(a*b)
print(a//b)
print(a**b) # a^b

#연필 53 자루 학생수 12명
# 12명에게 연필을 골고루 나눠주려면 한명당 몇 자루씩, 남은 연필은 몇 개?
pencil=53
person=12
print(pencil//person)
print(pencil%person)

"hello world"

""" life is too short. YOu need python"""

'''life is too short. YOu need python'''

food = "Python's favorite food is perl"
food

say = '"Python is very easy" he says'
say

# 문자열 길이 구하기
a='Life is too short'
len(a)

#문자열 내에서 특정 index에 해당하는 문자얻기(index는 0부터 시작)
b='L'
print(b)
print(len(b))

#문자열 내에서 특정 index에 해당하는 문자얻기
#인덱싱
print(a[2])
print(a[6])

print(a[len(a)-1])
print(a[-1]) # 뒤에서 시작하는 index

#슬라이싱 - 문자열의 일부범위를 추출
a[0:len(a)-1] # 시작 <= 범위 < 끝

a[0:4] # 0<=범위<4

point='123'
print(type(point))
print(point)

print(a[:]) # 범위 전부
print(a[:4])

b=a[:]
c=a[3:7]
print(id(a)) # id(변수명) -> 저장된 위치값
print(id(b))
print(id(c))

a='20010331Rainy'
year=a[0:4]
month=a[4:6]
day=a[6:8]
wheather=a[8:]
print(year,month,day,wheather)
today = "오늘은 %s년 %s월 %s일, 날씨는 %s입니다. " %(year, month, day, wheather)
print(today)

#문자열 포멧 - 출력시 포멧
ss = "I eat %s apples." % "five"
ss

"rate is %s" %3.24

"Error is %d%%" %98

#포멧기호와 정렬 공백
"%10s" %"hi"

"%-10sjane" %"hi"

"%0.4f" %3.142592

"%10.4f" %3.142592

#format 함수를 이용한 포맷팅
"I eat {0} apples".format(3) # {index번호}

"I eat {0} apples".format("five")#{index번호}

# 2개 이상 값 넣기
number=10
day="three"
"I ate {0} apples. so I was sick for {1}days".format(number,day)

#index와 변수 혼용
"I ate {0} apples. so I was sick for {day}days.".format(number,day=3)

#format함수를 이용한 정렬
print("{0:>10}".format("hi")) #오른쪽 정렬
print("{0:<10}".format("hi")) #좌측정렬
print("{0:^10}".format("hi")) #가운데정렬

#패턴 채우기
"{0:=^10}".format("hi")

#{}표현
"{{ and }}".format()



# 3.6 이후 f 문자열 포매팅 함수
name='홍길동'
age=30
f'나의 이름은 {name}이고, 나이는 {age}입니다.' # 3.6 이전의 경우에는 무조건 format함수 사용

f'나의 이름은 {name}이고, 내년 나이는 {age+1}입니다.'

# 문자열 관련 함수들
a="hobby"
a.count('b') #a문자열 내에서 'b'문자 개수

#위치 find(), index()
a="Python is the best choice"
print(a.find('b')) #문자열 내에 해당 패턴을 찾으면 index 번호를 출력
print(a.find('k')) #문자열 내에 해당 패턴이 없으면 -1을 리턴

a="Python is the best choice"
a.index('b')
#a.index('k') #해당 문자패턴이 문장내 없으면 오류발생(예외(exception))

#문자열 삽입
".".join('abcd')

".".join(['a','b','c','d'])

a="hi"
a.upper()

a.lower()

# 공백 제거 함수
a="     hi     "
print(len(a))
b=a.lstrip()
print(len(b))
c=b.rstrip()
print(len(c))
print(c)
print(a.strip())

#문자열 바꾸기
a="life is too short"
#a[:4]="Your leg"
c=a.replace("life","Your leg")
print(a)
print(c)

#문자열 나누기 split()
a="Life is too short"
a.split()

b="a:b:c:d"
b.split(":")

#리스트
#1,3,5,7,9
odd=[1,3,5,7,9]
type(odd)

a=[] # 빈(empty)
b=[1,2,3]
c=['Life', 'is', 'too', 'short']
d=[1,2,'Life','is']
e=[1,2,['life','is']]

b[0]

b[0]+b[2]

e[2][0]

#리스트 연산
a=[1,2,3]
b=[4,5,6]
c=a+b

a*3

len(a)

#인덱싱 수정
a=[1,2,3]
a[2]=4
a

del a[1]
a

a.append(4)
a

#리스트 정렬 - 오름차순
a=[1,4,3,2]
a.sort()
a

a.reverse()
a

#index()위치 반환
a=[a,b,c]
a.index(c)

#리스트에 요소 삽입 insert()
a.insert(0,4)
a

#제거 remove()
a.remove(3)
a

a=[1,2,3]
print(a.pop(1))
print(a)

#리스트확장(extend)
a=[1,2,3]
a.extend([4,5])
a

b=a+[4,5]
b